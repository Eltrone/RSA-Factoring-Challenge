#!/usr/bin/env python3

import random
import sys

def gcd(a, b):
    """Calcule le plus grand commun diviseur de a et b."""
    while b:
        a, b = b, a % b
    return a

def pollard_rho(n):
    """Implémentation optimisée de l'algorithme de Pollard rho pour la factorisation."""
    if n % 2 == 0:
        return 2
    x = random.randint(2, n - 1)
    y = x
    c = random.randint(1, n - 1)
    g = 1
    while g == 1:
        x = (x * x + c) % n
        y = (y * y + c) % n
        y = (y * y + c) % n
        g = gcd(abs(x - y), n)
    return g

def factorize(n):
    """Factorise un nombre en utilisant l'algorithme de Pollard rho."""
    if n == 1:
        return []
    if n % 2 == 0:
        return [2] + factorize(n // 2)
    factor = pollard_rho(n)
    if factor == n:
        return [n]
    return factorize(factor) + factorize(n // factor)

def process_rsa_file(filename):
    """Traite un fichier contenant un nombre RSA et affiche sa factorisation."""
    with open(filename, 'r') as file:
        number = int(file.read().strip())
        factors = factorize(number)
        factors.sort()
        p, q = factors[-2], factors[-1]  # Prend les deux plus grands facteurs
        print(f"{number} = {p} * {q}")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python rsa.py <file>")
    else:
        process_rsa_file(sys.argv[1])

